// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;
import 'package:ffi/ffi.dart' as pkg_ffi;

/// Bindings for `src/libnativeffi.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen_golang.yaml`.
///
class NativeAddGolangBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeAddGolangBindings(ffi.DynamicLibrary dynamicLibrary)
    : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeAddGolangBindings.fromLookup(
    ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup,
  ) : _lookup = lookup;

  int TestPlus(int a, int b, GoString c) {
    return _TestPlus(a, b, c);
  }

  late final _TestPlusPtr =
      _lookup<ffi.NativeFunction<GoInt Function(GoInt, GoInt, GoString)>>(
        'TestPlus',
      );
  late final _TestPlus =
      _TestPlusPtr.asFunction<int Function(int, int, GoString)>();

  int TestPlusLongRunning(int a, int b, GoString c) {
    return _TestPlusLongRunning(a, b, c);
  }

  late final _TestPlusLongRunningPtr =
      _lookup<ffi.NativeFunction<GoInt Function(GoInt, GoInt, GoString)>>(
        'TestPlusLongRunning',
      );
  late final _TestPlusLongRunning =
      _TestPlusLongRunningPtr.asFunction<int Function(int, int, GoString)>();

  int TestDivideByZero() {
    return _TestDivideByZero();
  }

  late final _TestDivideByZeroPtr =
      _lookup<ffi.NativeFunction<GoInt Function()>>('TestDivideByZero');
  late final _TestDivideByZero =
      _TestDivideByZeroPtr.asFunction<int Function()>();
}

final class _GoString_ extends ffi.Struct {
  external ffi.Pointer<pkg_ffi.Utf8> p;

  @ptrdiff_t()
  external int n;
}

typedef ptrdiff_t = __darwin_ptrdiff_t;
typedef __darwin_ptrdiff_t = ffi.Long;
typedef Dart__darwin_ptrdiff_t = int;

final class GoInterface extends ffi.Struct {
  external ffi.Pointer<ffi.Void> t;

  external ffi.Pointer<ffi.Void> v;
}

final class GoSlice extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  @GoInt()
  external int len;

  @GoInt()
  external int cap;
}

typedef GoInt = GoInt64;
typedef GoInt64 = ffi.LongLong;
typedef DartGoInt64 = int;
typedef GoString = _GoString_;
